// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: invoices.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (
  id,
  company_id,
  customer_id,
  issue_date,
  payment_amount,
  charge,
  charge_rate,
  consumption_tax,
  billing_amount,
  payment_due_date,
  status
)
VALUES
  ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, company_id, customer_id, issue_date, payment_amount, charge, charge_rate, consumption_tax, billing_amount, payment_due_date, status
`

type CreateInvoiceParams struct {
	ID             int32
	CompanyID      int32
	CustomerID     int32
	IssueDate      pgtype.Date
	PaymentAmount  pgtype.Numeric
	Charge         pgtype.Numeric
	ChargeRate     pgtype.Numeric
	ConsumptionTax pgtype.Numeric
	BillingAmount  pgtype.Numeric
	PaymentDueDate pgtype.Date
	Status         InvoiceStatus
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRow(ctx, createInvoice,
		arg.ID,
		arg.CompanyID,
		arg.CustomerID,
		arg.IssueDate,
		arg.PaymentAmount,
		arg.Charge,
		arg.ChargeRate,
		arg.ConsumptionTax,
		arg.BillingAmount,
		arg.PaymentDueDate,
		arg.Status,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.CustomerID,
		&i.IssueDate,
		&i.PaymentAmount,
		&i.Charge,
		&i.ChargeRate,
		&i.ConsumptionTax,
		&i.BillingAmount,
		&i.PaymentDueDate,
		&i.Status,
	)
	return i, err
}
